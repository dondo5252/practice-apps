"use strict";

//model
var mongoose = require("mongoose"); // 1. Use mongoose to establish a connection to MongoDB


mongoose.connect('mongodb://localhost/glossary'); // 2. Set up any schema and models needed by the app

var glossarySchema = new mongoose.Schema({
  word: String,
  definition: String
});
var Glossary = mongoose.model('Glossary', glossarySchema); //Create

var saveInfo = function saveInfo(info) {
  // console.log(info, 'saveINFO')
  return Glossary.create(info);
}; //read


var getAll = function getAll() {
  return Glossary.find({}).exec();
}; //update


var updateOne = function updateOne(wordObj) {
  var filter = {
    word: wordObj.word
  };
  var update = {
    definition: wordObj.definition
  };
  return Glossary.findOneAndUpdate(filter, update, {
    "new": true
  });
}; //Delete


var deleteWord = function deleteWord(wordObj) {
  // console.log(wordObj, "deleted")
  return Glossary.deleteOne(wordObj);
}; // 3. Export the models


module.exports.Glossary = Glossary;
module.exports.save = saveInfo;
module.exports.get = getAll;
module.exports.deleteWord = deleteWord;
module.exports.updateOne = updateOne; // 4. Import the models into any modules that need them
//
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJjb25uZWN0IiwiZ2xvc3NhcnlTY2hlbWEiLCJTY2hlbWEiLCJ3b3JkIiwiU3RyaW5nIiwiZGVmaW5pdGlvbiIsIkdsb3NzYXJ5IiwibW9kZWwiLCJzYXZlSW5mbyIsImluZm8iLCJjcmVhdGUiLCJnZXRBbGwiLCJmaW5kIiwiZXhlYyIsInVwZGF0ZU9uZSIsIndvcmRPYmoiLCJmaWx0ZXIiLCJ1cGRhdGUiLCJmaW5kT25lQW5kVXBkYXRlIiwiZGVsZXRlV29yZCIsImRlbGV0ZU9uZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzYXZlIiwiZ2V0Il0sInNvdXJjZXMiOlsiLi4vLi4vc2VydmVyL2RiLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vbW9kZWxcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpO1xuXG4vLyAxLiBVc2UgbW9uZ29vc2UgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB0byBNb25nb0RCXG5tb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vbG9jYWxob3N0L2dsb3NzYXJ5Jyk7XG4vLyAyLiBTZXQgdXAgYW55IHNjaGVtYSBhbmQgbW9kZWxzIG5lZWRlZCBieSB0aGUgYXBwXG5cblxuY29uc3QgZ2xvc3NhcnlTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hICh7XG4gIHdvcmQ6IFN0cmluZyxcbiAgZGVmaW5pdGlvbjogU3RyaW5nXG59KTtcblxubGV0IEdsb3NzYXJ5ID0gbW9uZ29vc2UubW9kZWwoJ0dsb3NzYXJ5JywgZ2xvc3NhcnlTY2hlbWEpXG4vL0NyZWF0ZVxuIGxldCBzYXZlSW5mbyA9IChpbmZvKSA9PiB7XG4gIC8vIGNvbnNvbGUubG9nKGluZm8sICdzYXZlSU5GTycpXG4gIHJldHVybiBHbG9zc2FyeS5jcmVhdGUoaW5mbylcbiB9XG5cblxuXG5cbi8vcmVhZFxuIGxldCBnZXRBbGwgPSAoKSA9PiB7XG4gIHJldHVybiBHbG9zc2FyeVxuICAuZmluZCh7fSlcbiAgIC5leGVjKClcbiB9XG5cblxuLy91cGRhdGVcbiAgbGV0IHVwZGF0ZU9uZSA9ICh3b3JkT2JqKSA9PiB7XG4gICAgdmFyIGZpbHRlciA9IHt3b3JkOiB3b3JkT2JqLndvcmR9XG4gICAgdmFyIHVwZGF0ZSA9IHtkZWZpbml0aW9uOiB3b3JkT2JqLmRlZmluaXRpb259XG4gICAgcmV0dXJuIEdsb3NzYXJ5LmZpbmRPbmVBbmRVcGRhdGUoZmlsdGVyLCB1cGRhdGUsIHtcbiAgICAgIG5ldzogdHJ1ZVxuICAgIH0pXG4gIH1cbi8vRGVsZXRlXG4gIGxldCBkZWxldGVXb3JkID0gKHdvcmRPYmopID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyh3b3JkT2JqLCBcImRlbGV0ZWRcIilcbiAgICAgIHJldHVybiBHbG9zc2FyeS5kZWxldGVPbmUod29yZE9iailcbiAgIH1cblxuXG5cbi8vIDMuIEV4cG9ydCB0aGUgbW9kZWxzXG5tb2R1bGUuZXhwb3J0cy5HbG9zc2FyeSA9IEdsb3NzYXJ5O1xubW9kdWxlLmV4cG9ydHMuc2F2ZSA9IHNhdmVJbmZvO1xubW9kdWxlLmV4cG9ydHMuZ2V0ID0gZ2V0QWxsO1xubW9kdWxlLmV4cG9ydHMuZGVsZXRlV29yZCA9IGRlbGV0ZVdvcmRcbm1vZHVsZS5leHBvcnRzLnVwZGF0ZU9uZSA9IHVwZGF0ZU9uZVxuLy8gNC4gSW1wb3J0IHRoZSBtb2RlbHMgaW50byBhbnkgbW9kdWxlcyB0aGF0IG5lZWQgdGhlbVxuLy8iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXhCLEMsQ0FFQTs7O0FBQ0FELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQiw4QkFBakIsRSxDQUNBOztBQUdBLElBQU1DLGNBQWMsR0FBRyxJQUFJSCxRQUFRLENBQUNJLE1BQWIsQ0FBcUI7RUFDMUNDLElBQUksRUFBRUMsTUFEb0M7RUFFMUNDLFVBQVUsRUFBRUQ7QUFGOEIsQ0FBckIsQ0FBdkI7QUFLQSxJQUFJRSxRQUFRLEdBQUdSLFFBQVEsQ0FBQ1MsS0FBVCxDQUFlLFVBQWYsRUFBMkJOLGNBQTNCLENBQWYsQyxDQUNBOztBQUNDLElBQUlPLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUNDLElBQUQsRUFBVTtFQUN4QjtFQUNBLE9BQU9ILFFBQVEsQ0FBQ0ksTUFBVCxDQUFnQkQsSUFBaEIsQ0FBUDtBQUNBLENBSEQsQyxDQVFEOzs7QUFDQyxJQUFJRSxNQUFNLEdBQUcsU0FBVEEsTUFBUyxHQUFNO0VBQ2xCLE9BQU9MLFFBQVEsQ0FDZE0sSUFETSxDQUNELEVBREMsRUFFTEMsSUFGSyxFQUFQO0FBR0EsQ0FKRCxDLENBT0Q7OztBQUNFLElBQUlDLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNDLE9BQUQsRUFBYTtFQUMzQixJQUFJQyxNQUFNLEdBQUc7SUFBQ2IsSUFBSSxFQUFFWSxPQUFPLENBQUNaO0VBQWYsQ0FBYjtFQUNBLElBQUljLE1BQU0sR0FBRztJQUFDWixVQUFVLEVBQUVVLE9BQU8sQ0FBQ1Y7RUFBckIsQ0FBYjtFQUNBLE9BQU9DLFFBQVEsQ0FBQ1ksZ0JBQVQsQ0FBMEJGLE1BQTFCLEVBQWtDQyxNQUFsQyxFQUEwQztJQUMvQyxPQUFLO0VBRDBDLENBQTFDLENBQVA7QUFHRCxDQU5ELEMsQ0FPRjs7O0FBQ0UsSUFBSUUsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ0osT0FBRCxFQUFhO0VBQzVCO0VBQ0UsT0FBT1QsUUFBUSxDQUFDYyxTQUFULENBQW1CTCxPQUFuQixDQUFQO0FBQ0YsQ0FIRixDLENBT0Y7OztBQUNBTSxNQUFNLENBQUNDLE9BQVAsQ0FBZWhCLFFBQWYsR0FBMEJBLFFBQTFCO0FBQ0FlLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxJQUFmLEdBQXNCZixRQUF0QjtBQUNBYSxNQUFNLENBQUNDLE9BQVAsQ0FBZUUsR0FBZixHQUFxQmIsTUFBckI7QUFDQVUsTUFBTSxDQUFDQyxPQUFQLENBQWVILFVBQWYsR0FBNEJBLFVBQTVCO0FBQ0FFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUixTQUFmLEdBQTJCQSxTQUEzQixDLENBQ0E7QUFDQSJ9