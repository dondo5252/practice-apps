"use strict";

//controller
require("dotenv").config(); // const save = require('./db.js')
// const get = require('./db.js')


var _require = require('./db.js'),
    save = _require.save,
    get = _require.get,
    deleteWord = _require.deleteWord,
    updateOne = _require.updateOne;

var express = require("express");

var path = require("path");

var bodyParser = require('body-parser');

var app = express(); // Serves up all static and generated assets in ../client/dist.

app.use(express["static"](path.join(__dirname, "../client/dist")));
app.use(bodyParser.json()); //parses data allow access to req.body
//Create

app.post('/glossary', function (req, res) {
  save(req.body).then(function () {
    res.sendStatus(200).send();
  })["catch"](function (error) {
    return console.log(error, "error posting");
  });
}); //read

app.get('/glossary', function (req, res) {
  //console.log(get.getAll)
  get().then(function (allData) {
    res.send(allData);
  })["catch"](function (error) {
    return console.log(error, "error getting");
  });
}); //update

app.patch('/glossary', function (req, res) {
  // console.log(req.body, 'boodddyyyyy on update')
  updateOne(req.body).then(function (response) {
    res.send(response);
  })["catch"](function (error) {
    return console.log(error, "error patching");
  });
}); //delete

app["delete"]('/glossary', function (req, res) {
  deleteWord(req.body).then(function () {
    res.send("Deleted from app.delete");
  })["catch"](function (error) {
    res.sendStatus(404);
    console.log(error, "error deleting");
  });
});
app.listen(process.env.PORT);
console.log("Listening at http://localhost:".concat(process.env.PORT));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwic2F2ZSIsImdldCIsImRlbGV0ZVdvcmQiLCJ1cGRhdGVPbmUiLCJleHByZXNzIiwicGF0aCIsImJvZHlQYXJzZXIiLCJhcHAiLCJ1c2UiLCJqb2luIiwiX19kaXJuYW1lIiwianNvbiIsInBvc3QiLCJyZXEiLCJyZXMiLCJib2R5IiwidGhlbiIsInNlbmRTdGF0dXMiLCJzZW5kIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiYWxsRGF0YSIsInBhdGNoIiwicmVzcG9uc2UiLCJsaXN0ZW4iLCJwcm9jZXNzIiwiZW52IiwiUE9SVCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2NvbnRyb2xsZXJcbnJlcXVpcmUoXCJkb3RlbnZcIikuY29uZmlnKCk7XG4vLyBjb25zdCBzYXZlID0gcmVxdWlyZSgnLi9kYi5qcycpXG4vLyBjb25zdCBnZXQgPSByZXF1aXJlKCcuL2RiLmpzJylcbmNvbnN0e3NhdmUsIGdldCwgZGVsZXRlV29yZCwgdXBkYXRlT25lfSA9IHJlcXVpcmUoJy4vZGIuanMnKVxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJylcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyBTZXJ2ZXMgdXAgYWxsIHN0YXRpYyBhbmQgZ2VuZXJhdGVkIGFzc2V0cyBpbiAuLi9jbGllbnQvZGlzdC5cbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLi9jbGllbnQvZGlzdFwiKSkpO1xuIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpLy9wYXJzZXMgZGF0YSBhbGxvdyBhY2Nlc3MgdG8gcmVxLmJvZHlcblxuLy9DcmVhdGVcbmFwcC5wb3N0KCcvZ2xvc3NhcnknLCAocmVxLHJlcykgPT4ge1xuICBzYXZlKHJlcS5ib2R5KVxuICAudGhlbigoKSA9PiB7XG4gICAgcmVzLnNlbmRTdGF0dXMoMjAwKS5zZW5kKCk7XG4gIH0pXG4gIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGVycm9yLCBcImVycm9yIHBvc3RpbmdcIikpXG59KVxuXG4vL3JlYWRcbmFwcC5nZXQoJy9nbG9zc2FyeScsIChyZXEsIHJlcykgPT4ge1xuICAgLy9jb25zb2xlLmxvZyhnZXQuZ2V0QWxsKVxuICBnZXQoKVxuICAudGhlbigoYWxsRGF0YSkgPT4ge1xuICAgICAgcmVzLnNlbmQoYWxsRGF0YSlcbiAgfSlcbiAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coZXJyb3IsIFwiZXJyb3IgZ2V0dGluZ1wiKSlcbn0pXG5cbi8vdXBkYXRlXG5hcHAucGF0Y2goJy9nbG9zc2FyeScsIChyZXEscmVzKSA9PiB7XG4gIC8vIGNvbnNvbGUubG9nKHJlcS5ib2R5LCAnYm9vZGRkeXl5eXkgb24gdXBkYXRlJylcbiAgdXBkYXRlT25lKHJlcS5ib2R5KVxuICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICByZXMuc2VuZChyZXNwb25zZSlcbiAgfSlcbiAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coZXJyb3IsIFwiZXJyb3IgcGF0Y2hpbmdcIikpXG59KVxuXG5cbi8vZGVsZXRlXG5hcHAuZGVsZXRlKCcvZ2xvc3NhcnknLCAgKHJlcSwgcmVzKSA9PiB7XG4gIGRlbGV0ZVdvcmQocmVxLmJvZHkpXG4gIC50aGVuKCgpID0+IHtcbiAgICAgIHJlcy5zZW5kKFwiRGVsZXRlZCBmcm9tIGFwcC5kZWxldGVcIilcbiAgfSlcbiAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgIHJlcy5zZW5kU3RhdHVzKDQwNClcbiAgICBjb25zb2xlLmxvZyhlcnJvciwgXCJlcnJvciBkZWxldGluZ1wiKVxuICB9KVxufSlcblxuXG5cbmFwcC5saXN0ZW4ocHJvY2Vzcy5lbnYuUE9SVCk7XG5jb25zb2xlLmxv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