"use strict";

//model
var mongoose = require("mongoose"); // 1. Use mongoose to establish a connection to MongoDB


mongoose.connect('mongodb://localhost/glossary'); // 2. Set up any schema and models needed by the app

var glossarySchema = new mongoose.Schema({
  word: String,
  definition: String
});
var Glossary = mongoose.model('Glossary', glossarySchema);

var saveInfo = function saveInfo(info) {
  // console.log(info, 'saveINFO')
  return Glossary.create(info);
}; //findoneandupdate


var getAll = function getAll() {
  // var gloss = Glossary.find()
  // console.log("db getall", Glossary.find({__v: 0}))
  return Glossary.find({}).exec();
};

var deleteWord = function deleteWord(wordObj) {
  console.log(wordObj, "Wooorddd OBJ");
  return Glossary.deleteOne(wordObj);
}; // 3. Export the models


module.exports.Glossary = Glossary;
module.exports.save = saveInfo;
module.exports.get = getAll;
module.exports.deleteWord = deleteWord; // 4. Import the models into any modules that need them
//
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJjb25uZWN0IiwiZ2xvc3NhcnlTY2hlbWEiLCJTY2hlbWEiLCJ3b3JkIiwiU3RyaW5nIiwiZGVmaW5pdGlvbiIsIkdsb3NzYXJ5IiwibW9kZWwiLCJzYXZlSW5mbyIsImluZm8iLCJjcmVhdGUiLCJnZXRBbGwiLCJmaW5kIiwiZXhlYyIsImRlbGV0ZVdvcmQiLCJ3b3JkT2JqIiwiY29uc29sZSIsImxvZyIsImRlbGV0ZU9uZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzYXZlIiwiZ2V0Il0sInNvdXJjZXMiOlsiLi4vLi4vc2VydmVyL2RiLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vbW9kZWxcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpO1xuXG4vLyAxLiBVc2UgbW9uZ29vc2UgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB0byBNb25nb0RCXG5tb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vbG9jYWxob3N0L2dsb3NzYXJ5Jyk7XG4vLyAyLiBTZXQgdXAgYW55IHNjaGVtYSBhbmQgbW9kZWxzIG5lZWRlZCBieSB0aGUgYXBwXG5cblxuY29uc3QgZ2xvc3NhcnlTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hICh7XG4gIHdvcmQ6IFN0cmluZyxcbiAgZGVmaW5pdGlvbjogU3RyaW5nXG59KTtcblxubGV0IEdsb3NzYXJ5ID0gbW9uZ29vc2UubW9kZWwoJ0dsb3NzYXJ5JywgZ2xvc3NhcnlTY2hlbWEpXG5cbiBsZXQgc2F2ZUluZm8gPSAoaW5mbykgPT4ge1xuICAvLyBjb25zb2xlLmxvZyhpbmZvLCAnc2F2ZUlORk8nKVxuICByZXR1cm4gR2xvc3NhcnkuY3JlYXRlKGluZm8pXG4gfVxuXG5cblxuLy9maW5kb25lYW5kdXBkYXRlXG5cbiBsZXQgZ2V0QWxsID0gKCkgPT4ge1xuICAvLyB2YXIgZ2xvc3MgPSBHbG9zc2FyeS5maW5kKClcbiAgLy8gY29uc29sZS5sb2coXCJkYiBnZXRhbGxcIiwgR2xvc3NhcnkuZmluZCh7X192OiAwfSkpXG4gIHJldHVybiBHbG9zc2FyeVxuICAuZmluZCh7fSlcbiAgIC5leGVjKClcbiB9XG5cbiBsZXQgZGVsZXRlV29yZCA9ICh3b3JkT2JqKSA9PiB7XG4gIGNvbnNvbGUubG9nKHdvcmRPYmosIFwiV29vb3JkZGQgT0JKXCIpXG4gICAgcmV0dXJuIEdsb3NzYXJ5LmRlbGV0ZU9uZSh3b3JkT2JqKVxuIH1cblxuLy8gMy4gRXhwb3J0IHRoZSBtb2RlbHNcbm1vZHVsZS5leHBvcnRzLkdsb3NzYXJ5ID0gR2xvc3Nhcnk7XG5tb2R1bGUuZXhwb3J0cy5zYXZlID0gc2F2ZUluZm87XG5tb2R1bGUuZXhwb3J0cy5nZXQgPSBnZXRBbGw7XG5tb2R1bGUuZXhwb3J0cy5kZWxldGVXb3JkID0gZGVsZXRlV29yZFxuLy8gNC4gSW1wb3J0IHRoZSBtb2RlbHMgaW50byBhbnkgbW9kdWxlcyB0aGF0IG5lZWQgdGhlbVxuLy8iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXhCLEMsQ0FFQTs7O0FBQ0FELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQiw4QkFBakIsRSxDQUNBOztBQUdBLElBQU1DLGNBQWMsR0FBRyxJQUFJSCxRQUFRLENBQUNJLE1BQWIsQ0FBcUI7RUFDMUNDLElBQUksRUFBRUMsTUFEb0M7RUFFMUNDLFVBQVUsRUFBRUQ7QUFGOEIsQ0FBckIsQ0FBdkI7QUFLQSxJQUFJRSxRQUFRLEdBQUdSLFFBQVEsQ0FBQ1MsS0FBVCxDQUFlLFVBQWYsRUFBMkJOLGNBQTNCLENBQWY7O0FBRUMsSUFBSU8sUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0MsSUFBRCxFQUFVO0VBQ3hCO0VBQ0EsT0FBT0gsUUFBUSxDQUFDSSxNQUFULENBQWdCRCxJQUFoQixDQUFQO0FBQ0EsQ0FIRCxDLENBT0Q7OztBQUVDLElBQUlFLE1BQU0sR0FBRyxTQUFUQSxNQUFTLEdBQU07RUFDbEI7RUFDQTtFQUNBLE9BQU9MLFFBQVEsQ0FDZE0sSUFETSxDQUNELEVBREMsRUFFTEMsSUFGSyxFQUFQO0FBR0EsQ0FORDs7QUFRQSxJQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFDQyxPQUFELEVBQWE7RUFDN0JDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixPQUFaLEVBQXFCLGNBQXJCO0VBQ0UsT0FBT1QsUUFBUSxDQUFDWSxTQUFULENBQW1CSCxPQUFuQixDQUFQO0FBQ0YsQ0FIRCxDLENBS0Q7OztBQUNBSSxNQUFNLENBQUNDLE9BQVAsQ0FBZWQsUUFBZixHQUEwQkEsUUFBMUI7QUFDQWEsTUFBTSxDQUFDQyxPQUFQLENBQWVDLElBQWYsR0FBc0JiLFFBQXRCO0FBQ0FXLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRSxHQUFmLEdBQXFCWCxNQUFyQjtBQUNBUSxNQUFNLENBQUNDLE9BQVAsQ0FBZU4sVUFBZixHQUE0QkEsVUFBNUIsQyxDQUNBO0FBQ0EifQ==